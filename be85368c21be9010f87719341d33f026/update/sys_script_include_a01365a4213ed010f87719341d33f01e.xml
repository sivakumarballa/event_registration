<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_event_reg.EventRegistrationUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>EventRegistrationUtils</name>
        <script><![CDATA[var EventRegistrationUtils = Class.create();
EventRegistrationUtils.prototype = {
    _EVENT_TABLE: 'x_snc_event_reg_event',
    _ATTENDEE_TABLE: 'x_snc_event_reg_attendee',
    _LOCATION_TABLE: 'x_snc_event_reg_event_location',
    initialize: function() {},

    getLocationData: function(location_id, sys_id, start, end) {
        var result = {};
        var locGr = new GlideRecord(this._LOCATION_TABLE);
        if (locGr.get(location_id)) {
            result.name = locGr.getValue('name');
            result.capacity = locGr.getValue('capacity');
            result.status = locGr.getValue('status');

            if (start && end) {
                // look for other events in the same location between the times
                var locEventGr = new GlideAggregate(this._EVENT_TABLE);
                locEventGr.addQuery('location', location_id);
                locEventGr.addQuery('sys_id', '!=', sys_id);
                locEventGr.addQuery('date_from', '<', end);
                locEventGr.addQuery('date_to', '>', start);
                locEventGr.addQuery('state', 'IN', '1,2');
                locEventGr.addAggregate('COUNT');
                locEventGr.query();
                if (locEventGr.next()) {
                    result.other_events = parseInt(locEventGr.getAggregate('COUNT'));
                }
            }
        }

        return result;
    },

    // Expected to be called from a BR on the Attendee record
    // must be called in a Before BR as we don't update the attendee record
    calculateEventFullness: function(currentAttendee) {
        var event_id = currentAttendee.getValue('event_name');
        var current_status = currentAttendee.getValue('attendee_status');
        // lookup the event
        var eventGr = new GlideRecord(this._EVENT_TABLE);
        if (eventGr.get(event_id)) {
            var capacity = this._intOrZero(eventGr.getValue('capacity'));
            var currentPercent = this._intOrZero(eventGr.getValue('percent_full'));
            var addedNewAttendee = false;

            // is the attendee new or cancelling?
            if (current_status == 'not_submitted') {
                if (currentPercent < 100) {
                    // event isn't full, so confirm
                    currentAttendee.setValue('attendee_status', 'confirmed');
                    addedNewAttendee = true;
                } else {
                    // check if we have a waitlist
                    // if it's blank, it's unlimited
                    var waitlistSize = eventGr.getValue('waitlist_size');
                    if (!waitlistSize || waitlistSize.length === 0) {
                        // at this point, waitlistSize is a string, so it's blank if the length is 0
                        // means we can add the user to the waitlist
                        currentAttendee.setValue('attendee_status', 'waitlisted');
                        gs.addInfoMessage(gs.getMessage('Attendee added to waitlist'));
                    } else {
                        waitlistSize = this._intOrZero(waitlistSize);

                        // event full, so check if there's room on the waitlist
                        var currentWaitlistCountGa = new GlideAggregate(this._ATTENDEE_TABLE);
                        currentWaitlistCountGa.addQuery('event_name', event_id);
                        currentWaitlistCountGa.addQuery('attendee_status', 'waitlisted');
                        currentWaitlistCountGa.addAggregate('COUNT');
                        currentWaitlistCountGa.query();
                        if (currentWaitlistCountGa.next()) {
                            var currentWaitlistCount = parseInt(currentWaitlistCountGa.getAggregate('COUNT'));
                            if (currentWaitlistCount < waitlistSize) {
                                // there's room on the waitlist, so we can add
                                currentAttendee.setValue('attendee_status', 'waitlisted');
                            } else {
                                gs.addErrorMessage(gs.getMessage('Attendee not added; waitlist is full'));
                            }
                        } else {
                            // looks like there's no one on the waitlist, so we can add
                            currentAttendee.setValue('attendee_status', 'waitlisted');
                            gs.addInfoMessage(gs.getMessage('Attendee added to waitlist'));
                        }
                    }
                }
            } else if (current_status == 'cancelled') {
                // if we cancel, confirm the next person on the waitlist
                var firstWaitlistAttendeeGr = new GlideRecord(this._ATTENDEE_TABLE);
                firstWaitlistAttendeeGr.addQuery('event_name', event_id);
                firstWaitlistAttendeeGr.addQuery('attendee_status', 'waitlisted');
                firstWaitlistAttendeeGr.orderBy('date_submitted');
                firstWaitlistAttendeeGr.setLimit(1);
                firstWaitlistAttendeeGr.query();
                if (firstWaitlistAttendeeGr.next()) {
                    firstWaitlistAttendeeGr.setValue('attendee_status', 'confirmed');
                    firstWaitlistAttendeeGr.update();
                }
            }

            // recalculate new percentage
            var confirmedAttendeesGa = new GlideAggregate(this._ATTENDEE_TABLE);
            confirmedAttendeesGa.addQuery('event_name', event_id);
            confirmedAttendeesGa.addQuery('attendee_status', 'confirmed');
            confirmedAttendeesGa.addAggregate('COUNT');
            confirmedAttendeesGa.query();
            if (confirmedAttendeesGa.next()) {
                var newCount = parseInt(confirmedAttendeesGa.getAggregate('COUNT'));
                if (addedNewAttendee === true) {
                    // if we added a confirmed attendee (since we haven't saved the record), add it here
                    newCount++;
                }

                var newPercent = parseInt((newCount / capacity) * 100);
                if (newPercent != currentPercent) {
                    eventGr.setValue('percent_full', newPercent);
                    if (newPercent === 100) {
                        eventGr.setValue('is_full', true);
                    }
                    eventGr.update();
                }
            }

        }
    },

    _intOrZero: function(strValue) {
        var result = parseInt(strValue);
        if (isNaN(result)) {
            result = 0;
        }
        return result;
    },

    type: 'EventRegistrationUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>jeremy.duncan</sys_created_by>
        <sys_created_on>2020-08-19 20:33:14</sys_created_on>
        <sys_id>a01365a4213ed010f87719341d33f01e</sys_id>
        <sys_mod_count>19</sys_mod_count>
        <sys_name>EventRegistrationUtils</sys_name>
        <sys_package display_value="Event Registration" source="x_snc_event_reg">be85368c21be9010f87719341d33f026</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Event Registration">be85368c21be9010f87719341d33f026</sys_scope>
        <sys_update_name>sys_script_include_a01365a4213ed010f87719341d33f01e</sys_update_name>
        <sys_updated_by>brian.alson</sys_updated_by>
        <sys_updated_on>2020-08-28 16:55:59</sys_updated_on>
    </sys_script_include>
</record_update>
